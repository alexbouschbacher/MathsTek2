#!/usr/bin/env python3

import math
import sys

Distrib_table = [[99, 90, 80, 70, 60, 50, 40, 30, 20, 10, 5, 2, 1],
[0.00, 0.02, 0.06, 0.15, 0.27, 0.45, 0.71, 1.07, 1.64, 2.71, 3.84, 5.41, 6.63],
[0.02, 0.21, 0.45, 0.71, 1.02, 1.39, 1.83, 2.41, 3.22, 4.61, 5.99, 7.82, 9.21],
[0.11, 0.58, 1.01, 1.42, 1.87, 2.37, 2.95, 3.66, 4.64, 6.25, 7.81, 9.84, 11.34],
[0.30, 1.06, 1.65, 2.19, 2.75, 3.36, 4.04, 4.88, 5.99, 7.78, 9.49, 11.67, 13.28],
[0.55, 1.61, 2.34, 3.00, 3.66, 4.35, 5.13, 6.06, 7.29, 9.24, 11.07, 13.39, 15.09],
[0.7, 2.20, 3.07, 3.83, 4.57, 5.35, 6.21, 7.23, 8.56, 10.64, 12.59, 15.03, 16.81],
[1.24, 2.83, 3.82, 4.67, 5.49, 6.35, 7.28, 8.38, 9.80, 12.02, 14.07, 16.62, 18.48],
[1.65, 3.49, 4.59, 5.53, 6.42, 7.34, 8.35, 9.52, 11.03, 13.36, 15.51, 18.17, 20.09],
[2.09, 4.17, 5.38, 6.39, 7.63, 8.34, 9.41, 10.66, 12.24, 14.68, 16.92, 19.68, 21.67],
[2.56, 4.87, 6.18, 7.27, 8.30, 9.34, 10.47, 11.78, 13.44, 15.99, 18.31, 21.16, 23.21]]

def coef_binomial(n, k):
    return (math.factorial(n) // (math.factorial(k) * math.factorial(n - k)))

def binomial_law(k, p):
    return (coef_binomial(100, k) *  p**k * (1.0 - p)**(100 - k))

def calc_bino(p):
    tab = []
    k = 0.0
    while (k <= 50):
        tab.append(binomial_law(k, p))
        k += 1
    return (tab)


def calc_proba(val):
    i = 0
    p = 0.0
    while (i < 9):
        p += i * val[i] * 1.0
        i += 1
    p = p / 10000.0
    return (p)

if (__name__ == "__main__"):
    try:
        if (len(sys.argv) != 10):
            sys.exit(84)

        i = 1
        values = []
        sizes = []
        onglet = []
        Tx = []

        while (i < 10):
            values.append(int(sys.argv[i]))
            i += 1

        if (sum(values) != 100):
            sys.exit(84)

        i = 0
        size = 0
        lon = 0
        while (i < 9):
            if ((len(sizes) > 0 and (sizes[len(sizes) - 1] + size < size + values[i]))):
                sizes[len(sizes) - 1] += size
                onglet[len(onglet) - 1] += lon
                lon = 0
                size = 0
            size += values[i]
            lon += 1
            if (size >= 10):
                sizes.append(size)
                onglet.append(lon)
                size = 0
                lon = 0
            i += 1
        if (size != 0):
            sizes[len(sizes) - 1] += size
            onglet[len(onglet) - 1] += lon

        p = calc_proba(values)
        theorical = calc_bino(p)

        i = 0
        j = 0
        while (i < len(onglet) - 1):
            T = 0.0
            lon = 0
            while (lon < onglet[i]):
                T += theorical[j] * 100.0
                j += 1
                lon += 1
            i += 1
            Tx.append(T)

        T = 0.0
        while (j < len(theorical)):
            T += theorical[j] * 100.0
            j += 1
        Tx.append(T)

        i = 0
        chi = 0
        while (i < len(Tx)):
            chi += (pow(sizes[i] - Tx[i], 2)) / Tx[i]
            i += 1

        freedom = len(Tx) - 2
        if (freedom <= 0):
            sys.exit(84)

        i = 0
        pos = 0
        print("   x\t|", end='')
        while (i < len(onglet) - 1):
            if (onglet[i] == 1):
                print(" %d\t|" %pos, end='')
                pos += 1
            else:
                print(" %d-%d\t|" %(pos, pos + onglet[i] - 1), end='')
                pos += onglet[i]
            i += 1
        print(" %d+\t| Total" %pos)

        i = 0
        print("  Ox\t|", end='')
        while (i < len(sizes)):
            print(" %d\t|" % sizes[i], end='')
            i += 1
        print(" 100")

        i = 0
        print("  Tx\t|", end='')
        while (i < len(Tx)):
            print(" %.1f\t|" % Tx[i], end='')
            i += 1
        print(" 100")

        print("Distribution:\t\tB(100, %.4f)" %p)
        print("Chi-squared:\t\t%.3f" %chi)
        print("Degrees of freedom:\t%d" %freedom)

        if (chi < Distrib_table[freedom][0]):
            print("Fit validity:\t\tP > 99%")
        elif (chi > Distrib_table[freedom][12]):
            print("Fit validity:\t\tP < 1%")
        else:
            i = 0
            while (chi > Distrib_table[freedom][i]):
                i += 1
            print("Fit validity:\t\t%d%% < P < %d%%" %(Distrib_table[0][i], Distrib_table[0][i - 1]))

    except:
        sys.exit(84)
    sys.exit(0)
